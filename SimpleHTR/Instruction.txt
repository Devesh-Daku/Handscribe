HandScribe ‚úçÔ∏è
HandScribe is a full-stack web application that recognizes and transcribes handwritten text from a digital canvas in real-time. It uses a React frontend, a Node.js backend for orchestration, and a separate Python service hosting a pre-trained TensorFlow model for handwriting recognition.

‚ú® Live Demo
The live application is deployed and accessible at the following URL:

https://handscribe-six.vercel.app/

<!-- ======================================================================================================= -->

<!-- TODO: Create a GIF of your app and replace the URL below. -->

<!-- A GIF is the best way to quickly show recruiters what your project does. -->

<!-- A good tool for this is ScreenToGif (Windows) or Kap (macOS). -->

<!-- ======================================================================================================= -->

üöÄ Features
Real-time Drawing Canvas: A smooth, responsive canvas for drawing single or multiple lines of text.

Handwriting Recognition: Utilizes a machine learning model to convert drawings into digital text.

Full-Stack Architecture: A robust, decoupled system with a separate frontend, backend, and machine learning model.

Containerized Backend: The backend is containerized with Docker for consistent deployment and scalability.

üõ†Ô∏è Tech Stack


Technologies Used

Frontend

React, Vite, Axios, CSS

Backend

Node.js, Express.js, Python (for image processing script)

ML Model

Python, TensorFlow, Keras (based on SimpleHTR)

Deployment

Vercel (Frontend), Render (Backend & Model API), Docker

üèóÔ∏è Architecture
The application operates on a three-tier architecture, ensuring a clean separation of concerns:

Frontend (Vercel): A user draws on the React canvas. The drawing data (as a matrix of points) is sent to the Orchestrator Backend.

Orchestrator Backend (Render):

Receives the matrix data.

Spawns a Python script to convert the matrix into a standardized PNG image.

Sends this image to the dedicated Model API for recognition.

Model API (Render):

A separate Python service hosting the pre-trained SimpleHTR model.

Receives the image, performs the prediction, and returns the recognized text.

The Orchestrator Backend then forwards the final text back to the frontend, which displays it to the user.

Êú¨Âú∞ËÆæÁΩÆ (Getting Started)
To run this project locally, you will need to set up and run the frontend and the backend. The ML Model API is hosted on Render and can be used for local development.

Prerequisites
Node.js (v18 or later)

Python (v3.8 is recommended)

npm

Backend Setup
The backend orchestrates the process between the frontend and the model.

Navigate to the backend directory:

cd backend

Install Node.js dependencies:

npm install

Set up the Python virtual environment:

# Create a virtual environment
python -m venv venv

# Activate it (on Windows)
.\venv\Scripts\activate

# Activate it (on macOS/Linux)
# source venv/bin/activate

# Install Python dependencies
pip install -r requirements.txt

Create the environment file:

Create a file named .env in the /backend directory.

Copy the contents from the .env.example section below.

Start the backend server:

node server.js

The backend will now be running at http://localhost:5000.

Frontend Setup
Navigate to the frontend directory:

cd frontend 

Install Node.js dependencies:

npm install

Start the frontend development server:

npm run dev

The frontend will now be running at http://localhost:5173.

üîë Environment Variables
You will need to create .env files for both the frontend and backend for local development.

Backend (/backend/.env)
# The URL for your LOCAL frontend development server
FRONTEND_URL_DEV="http://localhost:5173"

# For local development, we can use the deployed model API
MODEL_API_URL="[https://handscribe.onrender.com/predict](https://handscribe.onrender.com/predict)"

Frontend (/frontend/.env.local)
# The URL for your LOCAL backend server
VITE_API_BASE_URL="http://localhost:5000"

üôè Acknowledgements
The handwriting recognition model used in this project is based on the SimpleHTR implementation by Harald Scheidl. The original repository and research can be found here:

github.com/githubharald/SimpleHTR